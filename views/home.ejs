<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= system.name %></title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- <style>
        body {
            background: linear-gradient(135deg, #020024, #090979, #00d4ff);
            color: #ffffff;
            font-family: 'Poppins', sans-serif;
        }

        .card {
            background: rgba(0, 0, 0, 0.7);
            border: none;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3), 0 0 10px rgba(0, 255, 255, 0.5);
        }

        .card-title {
            font-size: 1.5rem;
            text-transform: uppercase;
            color: #00ffea;
            text-shadow: 0 0 10px #00ffff, 0 0 20px #00ffff;
        }

        .card-text {
            font-size: 2.5rem;
            color: #408490;
        }

        h1 {
            color: #00ffea;
            text-shadow: 0 0 5px #00ffea, 0 0 20px #00ffea;
            text-align: center;
            margin-bottom: 30px;
        }

        .chart-container {
            width: 100%;
            max-height: 400px;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 15px;
            padding: 15px;
            box-shadow: 0 0 20px rgba(255, 0, 255, 0.3), 0 0 10px rgba(255, 0, 255, 0.5);
        }

        canvas {
            background: linear-gradient(135deg, #020024, #090979, #00d4ff);
            border-radius: 10px;
        }

        .table {
            background: rgba(0, 0, 0, 0.7);
            color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
        }

        .table th, .table td {
            color: #00ffea;
        }

        .status-online {
            color: #00ff00;
        }

        .status-offline {
            color: #ff0000;
        }
    </style> -->
    <style>
        body {
            background: radial-gradient(circle, #1e1e2f, #12121b);
            color: #eaeaea;
            font-family: 'Roboto', sans-serif;
        }
    
        h1 {
            color: #4fd1c5;
            text-shadow: 0 0 10px #4fd1c5, 0 0 20px #38b2ac;
            font-weight: 700;
            text-align: center;
            margin-bottom: 40px;
        }
    
        .card {
            background: linear-gradient(145deg, #2b2b3d, #23232e);
            border: none;
            border-radius: 15px;
            box-shadow: 5px 5px 15px #17171f, -5px -5px 15px #353543;
            transition: all 0.3s ease-in-out;
        }
    
        .card:hover {
            transform: scale(1.05);
            box-shadow: 10px 10px 30px #0a0a13, -10px -10px 30px #48486b;
        }
    
        .card-title {
            font-size: 1.4rem;
            font-weight: 600;
            text-transform: uppercase;
            color: #38b2ac;
            text-shadow: 0 0 10px #38b2ac, 0 0 20px #285e5c;
        }
    
        .card-text {
            font-size: 1.8rem;
            color: #ffffff;
        }
    
        .table {
            background: rgba(40, 40, 56, 0.95);
            border: none;
            border-radius: 10px;
            color: #ffffff;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }
    
        .table th {
            background: #2c3e50;
            font-weight: bold;
            text-transform: uppercase;
            color: #38b2ac;
            text-align: center;
        }
    
        .table td {
            text-align: center;
            vertical-align: middle;
            font-size: 1rem;
        }
    
        .table .status-online {
            color: #00ff00;
            font-weight: bold;
        }
    
        .table .status-offline {
            color: #ff5555;
            font-weight: bold;
        }
    
        .chart-container {
            background: linear-gradient(145deg, #1e293b, #111827);
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            padding: 20px;
        }
    
        canvas {
            background: #232330;
            border-radius: 10px;
        }
    
        /* Transition effect for table rows */
        tbody tr {
            transition: all 0.2s ease-in-out;
        }
    
        tbody tr:hover {
            background-color: #34495e;
        }
    </style>
    
</head>
<body>
    <div class="container mt-5">
        <h1><%= system.name %></h1>

        <!-- Cards for real-time data -->
        <div class="row text-center">
            <div class="col-md-4">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">Temperature</h5>
                        <p id="temperature" class="card-text"><%= system.data.temperature %> °C</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">Humidity</h5>
                        <p id="humidity" class="card-text"><%= system.data.humidity %> %</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">CO₂ Levels</h5>
                        <p id="co2" class="card-text"><%= system.data.co2_ppm %> ppm</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row text-center mt-3">
            <div class="col-md-4">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">PH</h5>
                        <p id="ph" class="card-text"><%= system.data.pHLevel %></p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">Turbidity</h5>
                        <p id="turbidity" class="card-text"><%= system.data.turbidity %></p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">Solar Voltage</h5>
                        <p id="ldr" class="card-text"><%= system.data.solarVolt %></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Locations and Status Section -->
        <div class="mt-5">
            <h2 class="text-center">Unit Locations and Status</h2>
            <table class="table table-bordered mt-3">
                <thead>
                    <tr>
                        <th>Unit Name</th>
                        <th>Location</th>
                        <th>Online Status</th>
                        <th>Last Updated</th>
                    </tr>
                </thead>
                <tbody>
                   
                        <tr>
                            <td><%= system.name %></td>
                            <td><%= system.location %></td>
                            <td class="<%= system.isOnline ? 'status-online' : 'status-offline' %>"><%= system.isOnline ? 'Online' : 'Offline' %></td>
                            <td><%= system.lastUpdated %></td>
                        </tr>
                   
                </tbody>
            </table>
        </div>

        <!-- Chart Section -->
        <div class="chart-container mt-5">
            <canvas id="temperatureChart"></canvas>
        </div>
    </div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // async function fetchSensorData() {
        //     try {
        //         const response = await fetch("/data");
        //         const data = await response.json();

        //         document.getElementById("temperature").innerText = `${data.temperature || 'N/A'} °C`;
        //         document.getElementById("humidity").innerText = `${data.humidity || 'N/A'} %`;
        //         document.getElementById("co2").innerText = `${data.co2_ppm || 'N/A'} ppm`;
        //         document.getElementById("ph").innerText = `${data.pHLevel || 'N/A'}`;
        //         document.getElementById("turbidity").innerText = `${data.turbidity || 'N/A'}`;
        //         document.getElementById("ldr").innerText = `${data.solarVolt || 'N/A'}`;

        //         updateChart(temperatureChart, data.temperature || null);
        //     } catch (error) {
        //         console.error("Error fetching sensor data:", error);
        //     }
        // }
        async function fetchUpdatedData(macAddress) {
    try {
        const response = await fetch(`/api/system/${macAddress}`);
        const updatedData = await response.json();
        console.log(updatedData)
        // Update the DOM elements dynamically
        document.getElementById("temperature").innerText = `${updatedData.data.temperature || 'N/A'} °C`;
        document.getElementById("humidity").innerText = `${updatedData.data.humidity || 'N/A'} %`;
        document.getElementById("co2").innerText = `${updatedData.data.co2_ppm || 'N/A'} ppm`;
        document.getElementById("ph").innerText = `${updatedData.data.pHLevel || 'N/A'}`;
        document.getElementById("turbidity").innerText = `${updatedData.data.turbidity || 'N/A'}`;
        document.getElementById("ldr").innerText = `${updatedData.data.solarVolt || 'N/A'}`;

        // Update the chart
        updateChart(temperatureChart, updatedData.data.temperature || null);
    } catch (error) {
        console.error('Error fetching updated data:', error);
    }
}

// Call fetchUpdatedData periodically
const macAddress = "<%= system.macAddress %>"; // Pass the macAddress dynamically
setInterval(() => fetchUpdatedData(macAddress), 3000);


        const ctx = document.getElementById("temperatureChart").getContext("2d");
        const temperatureChart = new Chart(ctx, {
            type: "line",
            data: {
                labels: [],
                datasets: [{
                    label: "Temperature (°C)",
                    data: [],
                    borderColor: "#ff00ff",
                    backgroundColor: "rgba(255, 0, 255, 0.3)",
                    fill: true,
                    tension: 0.4,
                }]
            },
            options: {
                plugins: {
                    legend: {
                        labels: {
                            color: "#ffffff"
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: { color: "#ffffff" },
                        title: { display: true, text: "Time", color: "#ffffff" }
                    },
                    y: {
                        ticks: { color: "#ffffff" },
                        title: { display: true, text: "Temperature (°C)", color: "#ffffff" },
                        beginAtZero: true
                    }
                }
            }
        });

        function updateChart(chart, value) {
            const now = new Date().toLocaleTimeString();
            if (value !== null) {
                chart.data.labels.push(now);
                chart.data.datasets[0].data.push(value);

                if (chart.data.labels.length > 20) {
                    chart.data.labels.shift();
                    chart.data.datasets[0].data.shift();
                }

                chart.update();
            }
        }

        setInterval(fetchSensorData, 1000);
    </script>
</body>
</html>
